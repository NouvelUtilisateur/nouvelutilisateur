--test casse-briques

io.stdout:setvbuf('no')
love.graphics.setDefaultFilter("nearest")
love.math.setRandomSeed(love.timer.getTime())

-- tableaux/variables de base -----------------------------------------------
map = {}

ball = {}
	ball.width = 25
	ball.height = 25
	ball.x = love.graphics.getWidth()/2
	ball.y  = love.graphics.getHeight()/2
	ball.vx = 10
	ball.vy = 10

brick = {}
	brick.width = 0
	brick.height = 0

particles = {}

playParticles = false


---------------------------------------------------------------------------------
-- LOAD -------------------------------------------------------------------------
---------------------------------------------------------------------------------
function love.load()

	brick.width = love.graphics.getWidth() / 6
	brick.height = 25

	map = {

		{newBrick(2),newBrick(1),newBrick(2),newBrick(2),newBrick(1),newBrick(2)},
		{newBrick(2),newBrick(2),newBrick(2),newBrick(2),newBrick(2),newBrick(2)}

		}
end
---------------------------------------------------------------------------------
-- FIN LOAD ---------------------------------------------------------------------
---------------------------------------------------------------------------------

----------------------------------------------------------------------
-- update ------------------------------------------------------------
----------------------------------------------------------------------
function love.update(dt)

	ball.x = ball.x + ball.vx
	ball.y = ball.y - ball.vy

	-- GESTION DES PARTICULES
	-- DONNE LA VITESSE
	for i = 1, #particles do
		if particles[i].type == 1 then
			particles[i].x = particles[i].x + particles[i].vx
			particles[i].y = particles[i].y - particles[i].vy
		elseif particles[i].type == 2 then
			particles[i].x = particles[i].x - particles[i].vx
			particles[i].y = particles[i].y - particles[i].vy
		elseif particles[i].type == 3 then
			particles[i].x = particles[i].x - particles[i].vx
			particles[i].y = particles[i].y + particles[i].vy
		elseif particles[i].type == 4 then
			particles[i].x = particles[i].x + particles[i].vx
			particles[i].y = particles[i].y + particles[i].vy
		elseif particles[i].type == 5 then
			particles[i].y = particles[i].y - particles[i].vy
		elseif particles[i].type == 6 then
			particles[i].y = particles[i].y + particles[i].vy
		elseif particles[i].type == 7 then
			particles[i].x = particles[i].x - particles[i].vx
		elseif particles[i].type == 8 then
			particles[i].x = particles[i].x + particles[i].vx
				
		end
	end

	-- GERE LA SUPPRESSION DES PARTICULES 
	for i = #particles, 1, -1 do
		if particles[i].type == 1 and particles[i].x > 800 and particles[i].y < 0 then
			table.remove(particles, i)
		elseif particles[i].type == 2 and particles[i].x < 0 and particles[i].y < 0 then
			table.remove(particles, i)
		elseif particles[i].type == 3 and particles[i].x < 0 and particles[i].y > 800 then
			table.remove(particles, i)
		elseif particles[i].type == 4 and particles[i].x > 800 and particles[i].y > 800 then
			table.remove(particles, i)
		elseif particles[i].type == 5 and particles[i].y < 0 then
			table.remove(particles, i)
		elseif particles[i].type == 6 and particles[i].y > 800 then
			table.remove(particles, i)
		elseif particles[i].type == 7 and particles[i].x < 0 then
			table.remove(particles, i)
		elseif particles[i].type == 8 and particles[i].x > 800 then
			table.remove(particles, i)
		end
	end


	-- COLLISIONS BALLE/BRIQUES 
	 balll = math.floor(ball.y / brick.height) + 1
	 ballc = math.floor(ball.x / brick.width) + 1


	if balll <= #map and balll >= 1 and ballc <= 6 and ballc >= 1 then
		if map[balll][ballc].type == 0 then
		map[balll][ballc].type = 0

		elseif map[balll][ballc].life <= 0 then
			map[balll][ballc].type = 0
			ball.vy = - ball.vy

			--CREE LES PARTICULES, LE BOOLEEN NE SERT A RIEN FINALEMENT
			playParticles = true
			
			for i = 1, 8 do
				newParticles(i, ball.x, ball.y)
			end
			-------------------------------------------------

		elseif map[balll][ballc].type == 1 or 2 then
			map[balll][ballc].life = map[balll][ballc].life - 1
			ball.vy = - ball.vy
			if map[balll][ballc].life == 0 then
				map[balll][ballc].color = function() love.graphics.setColor(0.7,0,0) end
			elseif map[balll][ballc].life == 1 then
				map[balll][ballc].color = function() love.graphics.setColor(1,0.5,0) end
			end
		end
	end

-- COLLISIONS BALLE/ECRAN 
	if ball.x + ball.width > love.graphics.getWidth() then
		ball.x = love.graphics.getWidth() - ball.width
		ball.vx = - ball.vx
	elseif ball.x < 0 then
		ball.x = 0
		ball.vx = - ball.vx
	elseif ball.y + ball.height > love.graphics.getHeight() then
		ball.y = love.graphics.getHeight() - ball.height
		ball.vy = - ball.vy 
	elseif ball.y < 0 then
		ball.y = 0
		ball.vy = - ball.vy
	end
end
---------------------------------------------------------------------------------
-- FIN UPDATE -------------------------------------------------------------------
---------------------------------------------------------------------------------


---------------------------------------------------------------------------------
-- DRAW -------------------------------------------------------------------------
---------------------------------------------------------------------------------
function love.draw()

	local brickx = 0
	local bricky = 0

	--DESSINE LES BRIQUES
	for l = 1, 2 do
		for c = 1, 6 do
			if map[l][c].type >= 1 then
				map[l][c].color()
				love.graphics.rectangle("fill", brickx, bricky, map[l][c].width - 2, map[l][c].height - 2, 5)
			end
			brickx = brickx + brick.width
		end
		brickx = 0
		bricky = bricky + brick.height
	end

	--DESSINE LA BALLE
	love.graphics.setColor(math.random(1,9)/10, math.random(1,9)/10, math.random(1,9)/10)
	love.graphics.rectangle("fill", ball.x, ball.y, ball.width, ball.height, 5)

	--DESSINE LES PARTICULES
	if playParticles == true then
		for i = 1, #particles do
			love.graphics.rectangle("fill", particles[i].x, particles[i].y, particles[i].width, particles[i].height)
		end
	end

	love.graphics.print("Particules: "..#particles, 10, 55, 0, 2)
end
---------------------------------------------------------------------------------
-- FIN DU DRAW ------------------------------------------------------------------
---------------------------------------------------------------------------------


-- NOUVELLE BRIQUE 
function newBrick(pType)

	local tab = {}
		tab.type = pType
		tab.width = love.graphics.getWidth() / 6
		tab.height = 25
		tab.life = 0
		tab.color = nil
		if tab.type == 0 then
			tab.life = 0
		end
		if tab.type == 1 then
			tab.life = 1
			tab.color = function() love.graphics.setColor(1,0.5,0) end -- jaune
		end
		if tab.type == 2 then
			tab.life = 2
			tab.color = function() love.graphics.setColor(0,0.7,0) end -- vert
		end

	return tab
end

-- NOUVELLE PARTICULE
function newParticles(pType, px, py)

	local tab = {}
		tab.type = pType
		tab.width = 10
		tab.height = 10
		tab.x = px
		tab.y = py
		tab.vx = 10
		tab.vy = 10

		table.insert(particles, tab)
end
